import React from "react";
import { Link } from "react-router-dom";

export default function ModulosDependencias() {
  return (
    <article className="space-y-10">
      {/* ENCABEZADO */}
      <header className="text-center">
        <h2 className="text-3xl font-semibold text-primary">
          4. M√≥dulos y dependencias (npm)
        </h2>
        <p className="text-secondary/70 mt-2">
          C√≥mo organizar el c√≥digo, usar funciones de terceros (dependencias) y gestionar Node con npm.
        </p>
      </header>

      {/* OBJETIVO */}
      <section className="rounded-2xl p-6 bg-white shadow border border-light">
        <h3 className="text-xl font-semibold text-secondary">üéØ Objetivo de la sesi√≥n</h3>
        <p className="mt-2">
          Aprender√°s a dividir el c√≥digo en M√≥dulos (archivos reusables) y a usar el gestor de paquetes npm para instalar librer√≠as externas. Esto es esencial para entender c√≥mo instalaremos y usaremos Express.
        </p>
      </section>

      {/* PASO 1: M√ìDULOS NATIVOS VS. LOCALES */}
      <section className="rounded-2xl p-6 bg-light border border-light">
        <h3 className="text-xl font-semibold text-secondary">1) M√≥dulos: organizaci√≥n del c√≥digo</h3>

        <div className="mb-6 bg-white p-4 rounded-xl shadow">
          <h4 className="font-semibold mb-2">¬øPor qu√© usar m√≥dulos?</h4>
          <p className="text-secondary/90">
            Un m√≥dulo es simplemente un archivo de JavaScript que exporta funciones, variables o clases para que otros archivos puedan importarlas y usarlas. Esto evita tener un √∫nico archivo gigante y facilita la reutilizaci√≥n y el mantenimiento del c√≥digo.
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-4">
          {/* M√ìDULO DE C√ìDIGO */}
          <div className="bg-white p-4 rounded-xl shadow">
            <h4 className="font-semibold mb-2">üìÑ Archivo: `utilidades.js`</h4>
            <pre className="overflow-x-auto text-sm"><code>{`// utilidades.js
// FUNCI√ìN A EXPORTAR
function sumar(a, b) {
  return a + b;
}

// EXPORTACI√ìN: Solo lo que se exporta es visible fuera del archivo
module.exports = {
  sumar,
  PI: 3.14159,
};`}</code></pre>
          </div>

          {/* M√ìDULO PRINCIPAL */}
          <div className="bg-white p-4 rounded-xl shadow">
            <h4 className="font-semibold mb-2">üìÑ Archivo: `principal.js`</h4>
            <pre className="overflow-x-auto text-sm"><code>{`// principal.js
// IMPORTACI√ìN: Usar require para traer las funciones
const { sumar, PI } = require('./utilidades'); // Usa './' para archivos locales

const resultado = sumar(10, 5);
console.log('Suma:', resultado); // Salida: Suma: 15
console.log('Valor PI:', PI); // Salida: Valor PI: 3.14159`}</code></pre>
          </div>
        </div>

        <div className="mt-4 bg-accent/10 p-4 rounded-xl border border-accent/20">
          <h4 className="font-semibold text-accent">Tipos de m√≥dulos en Node.js</h4>
          <ul className="list-disc pl-5 text-secondary/90 space-y-1 mt-2">
            <li>
              <strong>Nativos (built-in)</strong>: M√≥dulos que vienen con Node.js y no necesitan instalaci√≥n. Ej: <code>require('node:http')</code> o <code>require('node:fs')</code>.
            </li>
            <li>
              <strong>Locales</strong>: Archivos que t√∫ mismo creas y usas con una ruta relativa. Ej: <code>require('./utilidades')</code>.
            </li>
            <li>
              <strong>De terceros (Dependencias)</strong>: M√≥dulos instalados por <code>npm</code>. Ej: <code>require('express')</code>.
            </li>
          </ul>
        </div>
      </section>

      {/* PASO 2: INTRODUCCI√ìN A NPM */}
      <section className="rounded-2xl p-6 bg-white shadow border border-light">
        <h3 className="text-xl font-semibold text-secondary">2) npm y el archivo `package.json`</h3>
        <p className="mt-2">
          npm (Node Package Manager) es la herramienta que usaremos para instalar librer√≠as externas. Es el coraz√≥n de cualquier proyecto Node.js.
        </p>

        <div className="grid md:grid-cols-2 gap-4 mt-4">
          <div className="bg-light p-4 rounded-xl">
            <h4 className="font-semibold mb-2">üõ†Ô∏è Comandos b√°sicos</h4>
            <ul className="list-disc pl-6 space-y-1 text-secondary/90">
              <li>
                <code>npm init -y</code>: Crea el archivo <code>package.json</code> con valores por defecto.
              </li>
              <li>
                <code>npm install express</code>: Instala Express y lo a√±ade como dependencia.
              </li>
              <li>
                <code>npm start</code> o <code>npm run dev</code>: Ejecuta los scripts definidos en `package.json`.
              </li>
              <li>
                <code>npm install</code>: Instala todas las dependencias listadas en `package.json`.
              </li>
            </ul>
          </div>
          <div className="bg-light p-4 rounded-xl">
            <h4 className="font-semibold mb-2">üìÇ La carpeta `node_modules`</h4>
            <p className="text-secondary/90">
              Cuando instalas una dependencia (librer√≠a), npm la descarga y la guarda en una carpeta llamada <code>node_modules</code>. Esta carpeta puede ser muy grande y nunca se sube a repositorios (por eso usamos el archivo <code>.gitignore</code>). El archivo <code>package.json</code> es lo √∫nico que necesitamos para reconstruirla con <code>npm install</code>.
            </p>
          </div>
        </div>
      </section>

      {/* PASO 3: ANATOM√çA DE package.json */}
      <section className="rounded-2xl p-6 bg-light border border-light">
        <h3 className="text-xl font-semibold text-secondary">3) Entendiendo `package.json`</h3>
        <p className="mt-2">
          Este archivo act√∫a como el "carnet de identidad" de tu proyecto, listando metadatos, scripts de ejecuci√≥n y, lo m√°s importante, las librer√≠as que necesita.
        </p>

        <div className="bg-white p-4 rounded-xl shadow mt-3">
          <h4 className="font-semibold mb-2">Ejemplo de `package.json`</h4>
          <pre className="overflow-x-auto text-sm"><code>{`{
  "name": "mf0492-servidor-api",
  "version": "1.0.0",
  "description": "API de prueba para el m√≥dulo UF1844",
  "main": "api.js", // Archivo de arranque principal
  "scripts": {
    "start": "node api.js", // npm start
    "dev": "nodemon api.js" // npm run dev (√∫til para desarrollo)
  },
  "keywords": ["node", "express"],
  "author": "Tu Nombre",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2", // Librer√≠as que el proyecto necesita para funcionar
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "nodemon": "^3.0.1" // Librer√≠as solo para desarrollo (no necesarias en producci√≥n)
  }
}`}</code></pre>
        </div>
        
        <div className="mt-4 bg-accent/10 p-4 rounded-xl border border-accent/20">
          <h4 className="font-semibold text-accent">¬°Prep√°rate para Express!</h4>
          <p className="mt-2 text-secondary/90">
            Ahora que entendemos qu√© es un m√≥dulo y c√≥mo usar `npm` para gestionar dependencias, estamos listos para instalar y empezar a trabajar con el framework Express. Es un m√≥dulo de terceros que simplificar√° enormemente la creaci√≥n de rutas que vimos en la lecci√≥n anterior.
          </p>
        </div>
      </section>

        {/* NUEVA SECCI√ìN: Resumen y Transici√≥n a Express */}
      <section className="rounded-2xl p-6 bg-blue-50 shadow-inner border border-blue-200">
        <h3 className="text-2xl font-bold text-blue-900 mb-3">4) Resumen y Transici√≥n a Express (El Gran Salto)</h3>
        <p className="text-blue-800/90 mb-4">
          Hemos visto c√≥mo Node.js puro puede crear un servidor. Ahora, conectemos los puntos para entender por qu√© la industria usa Express y c√≥mo se relaciona con lo que ya hemos aprendido.
        </p>

        <div className="grid md:grid-cols-3 gap-4 text-sm text-blue-900">
            {/* Columna 1: Node.js Puro */}
            <div className="p-4 bg-blue-200 rounded-xl shadow-md">
                <h4 className="font-bold mb-2">üåê Node.js (El Motor)</h4>
                <ul className="list-disc pl-4 space-y-1">
                    <li>Es el entorno de ejecuci√≥n de JavaScript.</li>
                    <li>Soporta librer√≠as Nativas (ej: <code>node:http</code>).</li>
                    <li>Maneja las conexiones de red, el sistema de archivos y el motor V8.</li>
                    <li>Funcionalidad clave: Ofrece el objeto <code>http</code> para crear servidores.</li>
                </ul>
            </div>

            {/* Columna 2: Express (La Soluci√≥n) */}
            <div className="p-4 bg-blue-300 rounded-xl shadow-md">
                <h4 className="font-bold mb-2">üì¶ Express (La Dependencia)</h4>
                <ul className="list-disc pl-4 space-y-1">
                    <li>Es una librer√≠a (m√≥dulo de terceros) que se instala v√≠a npm.</li>
                    <li>Simplifica y abstrae las funciones de <code>node:http</code>.</li>
                    <li>Convierte las tareas complejas en m√©todos sencillos.</li>
                    <li>Funcionalidad clave: Hace el enrutamiento trivial.</li>
                </ul>
            </div>

            {/* Columna 3: Conexi√≥n y Diferencia */}
            <div className="p-4 bg-blue-100 rounded-xl shadow-md border border-blue-300">
                <h4 className="font-bold mb-2">üîó ¬øC√≥mo se Relacionan?</h4>
                <p className="mb-1"><strong>Node.js</strong> es el hardware; Express es el software.</p>
                <ul className="list-disc pl-4 space-y-1">
                    <li><strong>Son interdependientes:</strong> Express requiere que Node.js est√© corriendo para funcionar.</li>
                    <li><strong>Node es un m√≥dulo:</strong> Express es un m√≥dulo que Node.js importa.</li>
                    <li><strong>Diferencia clave:</strong> Node requiere `if (req.url === '...' && req.method === 'GET')`. Express lo reduce a un simple `app.get('/ruta', ...)`.</li>
                </ul>
            </div>
        </div>

        <div className="mt-6 bg-blue-700/80 p-4 rounded-xl text-white font-medium">
            <h4 className="font-bold text-xl mb-1">El Gran Salto de Abstracci√≥n</h4>
            <p className="text-sm">
                En el c√≥digo de la lecci√≥n anterior, el enrutamiento se hac√≠a con muchos <code>if</code> y la gesti√≥n de cabeceras era manual. Express elimina esa complejidad, permiti√©ndote centrarte en la l√≥gica de negocio (qu√© datos devolver) en lugar de en la l√≥gica de servidor (c√≥mo manejar la red).
            </p>
        </div>
      </section>

      {/* CIERRE */}
      <section className="rounded-2xl p-6 bg-gradient-to-r from-primary to-accent text-white shadow-brand">
        <h3 className="text-xl font-semibold">üöÄ Pr√≥ximo paso: Empezar con Express</h3>
        <p className="mt-2">
          Ya tienes la base de Node.js. A partir de la pr√≥xima lecci√≥n, dejaremos de lado el m√≥dulo nativo `node:http` y usaremos Express, que es el est√°ndar de facto para la creaci√≥n de APIs en Node.
        </p>
      </section>


      

      {/* NAVEGACI√ìN */}
      <footer className="flex justify-between text-sm text-secondary/80">
        <Link to="/mf0492/uf1844/primeros-pasos" className="hover:underline text-primary font-medium">
          ‚Üê Lecci√≥n anterior: Primeros pasos con Node.js
        </Link>
        <Link to="/mf0492/uf1844/asincronia" className="hover:underline text-primary font-medium">
          Siguiente:Asincronia ‚Üí
        </Link>
      </footer>
    </article>
  );
}
